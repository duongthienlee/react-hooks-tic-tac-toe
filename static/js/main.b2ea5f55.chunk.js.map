{"version":3,"sources":["icons/zToA.svg","icons/aToZ.svg","components/Square.jsx","components/Board.jsx","Game.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","mqlTablet","window","matchMedia","Square","_ref","value","onClick","className","_useState","useState","_useState2","Object","slicedToArray","mqlTabletState","setmqlTabletState","useEffect","addListener","mediaQueryChanged","removeEventListener","matches","size","react_default","a","createElement","style","fontSize","concat","lineHeight","height","width","data-pro","Board","squares","winLine","latestMove","renderSquare","i","latestMoveClass","winLineHighLight","includes","key","boardSquares","squaresInRow","n","push","Fragment","Game","Array","fill","historyState","setHistoryState","_useState3","_useState4","isXNextState","setXNextState","_useState5","_useState6","stepNumberState","setStepNumberState","_useState7","_useState8","isAsc","setAsc","gameScreenEl","useRef","_useState9","_useState10","gameScreenHeightState","setGameScreenHeightState","gameContainerEl","_useState11","_useState12","gameContainerHeightState","setGameContainerHeightState","historyMovesList","map","step","move","col","row","Math","floor","asc","reverse","status","current","calculateWinnerInfo","calculateWinner","winner","isDraw","getBoundingClientRect","centerGameScreen","ref","margin","history","slice","console","log","length","handleClick","display","justifyContent","src","aToZ","zToA","alt","lines","_lines$i","b","c","Boolean","location","hostname","match","ReactDOM","render","react_router_dom","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2ea5f55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zToA.68348264.svg\";","module.exports = __webpack_public_path__ + \"static/media/aToZ.e74e0075.svg\";","import React, { useEffect, useState } from 'react';\nconst mqlTablet = window.matchMedia(`(max-width: 991px)`);\n\nexport default ({ value, onClick, className }) => {\n    const [mqlTabletState, setmqlTabletState] = useState(mqlTablet);\n    useEffect(() => {\n        mqlTablet.addListener(mediaQueryChanged());\n        return () => {\n            mqlTablet.removeEventListener(mediaQueryChanged())\n        }\n    }, [])\n    const mediaQueryChanged = () => {\n        setmqlTabletState(mqlTablet.matches)\n    }\n\n    let size = mqlTabletState ? 60 : 90;\n    return (\n        <button\n            style={{\n                fontSize: `${size / 2}px`,\n                lineHeight: `${size}px`,\n                height: `${size}px`,\n                width: `${size}px`,\n            }}\n            data-pro={value} className={className} onClick={onClick}>\n            {value}\n        </button>\n    )\n}","import React from 'react';\nimport Square from \"./Square\"\n\nexport default ({ squares, onClick, winLine, latestMove }) => {\n    function renderSquare(i) {\n        let latestMoveClass = latestMove === i ? \"current--move\" : \"\"\n        let winLineHighLight = winLine && winLine.includes(i) ? \"square--highlight\" : \"\"\n        return (\n            <Square\n                className={`square ${winLineHighLight} ${latestMoveClass}`}\n                key={i}\n                value={squares[i]}\n                onClick={() => onClick(i)}\n            />\n        );\n    }\n    let boardSize = 3;\n    let boardSquares = [];\n    for (let i = 0; i < boardSize; i++) {\n        let squaresInRow = [];\n        for (let n = 0; n < boardSize; n++) {\n            squaresInRow.push(renderSquare(i * boardSize + n))\n        }\n        boardSquares.push(<div key={i} className=\"board-row\" >{squaresInRow}</div>)\n    }\n    return (\n        <React.Fragment>\n            {boardSquares}\n        </React.Fragment>\n    );\n}\n\n\n","import React, { useState, useRef, useEffect } from 'react';\nimport Board from \"./components/Board\"\nimport './App.css';\nimport zToA from \"./icons/zToA.svg\"\nimport aToZ from \"./icons/aToZ.svg\"\nfunction Game() {\n  //----------------------------------------- useState ---------------------------------------------------\n  const [historyState, setHistoryState] = useState([{ squares: Array(9).fill(null) }]);\n  const [isXNextState, setXNextState] = useState(true);\n  const [stepNumberState, setStepNumberState] = useState(0);\n  const [isAsc, setAsc] = useState(true);\n  //---------------------------------------- style useRef -------------------------------------------------\n  const gameScreenEl = useRef(null);\n  const [gameScreenHeightState, setGameScreenHeightState] = useState(0)\n  const gameContainerEl = useRef(null);\n  const [gameContainerHeightState, setGameContainerHeightState] = useState(0)\n\n  //---------------------------------------- handleClick --------------------------------------------------\n  function handleClick(i) {\n    //Data Change without Mutation\n    const history = historyState.slice(0, stepNumberState + 1);;\n    console.log(\"history\", history)\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares).winner || squares[i]) {\n      return console.log(\"tada \");\n    }\n    // determine player's turn\n    squares[i] = isXNextState ? 'X' : 'O';\n\n    setHistoryState(history.concat([{\n      squares: squares,\n      latestMove: i\n    }]))\n\n    setStepNumberState(history.length)\n    setXNextState(!isXNextState)\n  }\n  //------------------------------------------ jumpTo --------------------------------------------------------\n  function jumpTo(step) {\n    setStepNumberState(step);\n    setXNextState((step % 2) === 0)\n  }\n  //------------------------------------------ handleSortToggle ----------------------------------------------\n  // sorting the historyMovesList to desc\n  function handleSortToggle() {\n    setAsc(!isAsc);\n\n  }\n\n  //------------------------------------------ historyMovesList ----------------------------------------------\n  const historyMovesList = historyState.map((step, move) => {\n    const latestMove = step.latestMove;\n    const col = 1 + latestMove % 3;\n    const row = 1 + Math.floor(latestMove / 3);\n    const asc = move ? `#${move} (${col}, ${row})` : '#0 (0,0)';\n    return (\n      <button key={move} className={`history-btn ${move === stepNumberState ? 'history-btn--selected' : ''}`}\n        onClick={() => jumpTo(move)}>{asc}</button>\n    );\n  });\n\n  if (!isAsc) {\n    historyMovesList.reverse();\n  }\n  // render game info status\n  const current = historyState[stepNumberState];\n  const calculateWinnerInfo = calculateWinner(current.squares)\n  const winner = calculateWinnerInfo.winner;\n  let status;\n\n  winner ?\n    status = 'Winner: ' + winner :\n    (calculateWinnerInfo.isDraw ?\n      status = \"Draw\" :\n      status = `Next player: ${isXNextState ? 'X' : 'O'}`\n    )\n\n  // similar to componentDidMount(), run the effect function only when the component mounts\n  useEffect(() => {\n    setGameScreenHeightState(gameScreenEl.current.getBoundingClientRect().height)\n    setGameContainerHeightState(gameContainerEl.current.getBoundingClientRect().height)\n  }, [])\n\n  const centerGameScreen = (gameContainerHeightState - gameScreenHeightState) / 4\n  return (\n    <div\n      ref={gameContainerEl}\n      className=\"container game-container\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <div ref={gameScreenEl} className=\"game-screen\" style={{ margin: `${centerGameScreen}px 0px ${centerGameScreen}px 0px` }}>\n            <div className=\"row\">\n              <h3>TIC TAC TOE</h3>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-12 offset-0 col-lg-5 offset-lg-2 game__board\">\n                <div>\n                  <p className=\"game__status\" >{status}</p>\n                  <Board\n                    latestMove={current.latestMove}\n                    winLine={calculateWinnerInfo.winLine}\n                    squares={current.squares}\n                    onClick={(i) => {\n                      handleClick(i)\n                    }}\n                  />\n                </div>\n              </div>\n              <div className=\"col-lg-3\"\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\"\n                }}>\n                <div className=\"game__history-section\">\n                  <div onClick={() => handleSortToggle()} className=\"sorting-btn-wrapper cursor--pointer\">\n                    <span className=\"sorting-btn__text\" >{isAsc ? \"Ascending\" : \"Descending\"}</span>\n                    <img className=\"sorting-btn__icon cursor--pointer\" src={isAsc ? aToZ : zToA} alt={isAsc ? \"aToZ\" : \"zToA\"} />\n                  </div>\n                  {historyMovesList}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div >\n  );\n}\n/*\n     \n*/\n\nexport default Game;\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        winLine: lines[i],\n        isDraw: false,\n      };\n    }\n  }\n  let isDraw = true;\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      isDraw = false;\n      break;\n    }\n  }\n  return {\n    winner: null,\n    winLine: null,\n    isDraw: isDraw,\n  };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Route } from \"react-router-dom\"\nReactDOM.render(<HashRouter><Route exact path=\"/\" component={Game} /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}